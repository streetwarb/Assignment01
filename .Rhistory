getwd()
library("ggplot2")
#############################
### Generating data
# Simulate a 3rd-order polynomial data
# y = beta0 + beta1 * x + beta2 * x^2 + beta3 * x^3 + epsilon
# epsilon ~ N(0, sigma^2)
#############################
## population parameters
beta0 <- 1
beta1 <- -2
beta2 <- 6
beta3 <- -1
sigma <- 2
set.seed(7890)
## training data
x <- seq(0, 4.95, 0.05)
f_x <- beta0 + beta1 * x + beta2 * x^2 + beta3 * x^3
epsilon <- rnorm(n=100, mean=0, sd=sigma)
y <- f_x + epsilon
# visualize the training data (x, y) and the true model f_x
plot.train <- ggplot() + geom_point(aes(x=x, y=y), size=2) + geom_line(aes(x=x, y=f_x)) + theme_bw()
plot.train
## test data
x.test <- seq(0, 5, 0.1)
f_x.test <- beta0 + beta1 * x.test + beta2 * x.test^2 + beta3 * x.test^3
epsilon.test <- rnorm(n=length(x.test), mean=0, sd=sigma)
y.test <- f_x.test + epsilon.test
# visualize the test data (x, y) and the true model f_x
plot.test <- ggplot() + geom_point(aes(x=x.test, y=y.test), size=2) + geom_line(aes(x=x.test, y=f_x.test)) + theme_bw()
plot.test
#############################
### KNN regression
#############################
# knn regression is in package "FNN"
library("FNN")
?knn.reg
# prepare the X data in the matrix format, as required by knn.reg()
train.x <- matrix(x, ncol=1)
test.x <- matrix(x.test, ncol=1)
## 1. k=15, training MSE
model15.train <- knn.reg(train=train.x, test=train.x, y=y, k=15)
str(model15.train)
# plot the fit
plot.train + geom_line(aes(x=x, y=model15.train$pred), col="blue")
# Training MSE
mean((y - model15.train$pred)^2)
## 1b. k=15, test MSE
model15.test <- knn.reg(train=train.x, test=test.x, y=y, k=15)
str(model15.test)
# plot the fit
plot.test + geom_line(aes(x=x.test, y=model15.test$pred), col="blue")
plot.train + geom_line(aes(x=x, y=model15.train$pred), col="blue")
plot.test + geom_line(aes(x=x.test, y=model15.test$pred), col="blue")
geom_line(aes(x=x, y=model15.train$pred), col="red)
plot.test + geom_line(aes(x=x, y=model15.train$pred), col="blue")+geom_line(aes(x=x.test, y=model15.test$pred), col="blue")
plot.test + geom_line(aes(x=x, y=model15.train$pred), col="red")+geom_line(aes(x=x.test, y=model15.test$pred), col="blue")
model1.test <- knn.reg(train=train.x, test=test.x, y=y, k=1)
str(model1.test)
# plot the fit
plot.test + geom_line(aes(x=x.test, y=model1.test$pred), col="blue")
model1.test <- knn.reg(train=train.x, test=train.x, y=y, k=1)
str(model1.test)
# plot the fit
plot.test + geom_line(aes(x=x.test, y=model1.test$pred), col="blue")
plot.test + geom_line(aes(x=train.x, y=model1.test$pred), col="blue")
model1.test <- knn.reg(train=train.x, test=train.x, y=y, k=1)
str(model1.test)
# plot the fit
plot.test + geom_line(aes(x=train.x, y=model1.test$pred), col="blue")
plot.train  + geom_line(aes(x=train.x, y=model1.test$pred), col="blue")
model1.train <- knn.reg(train=train.x, test=train.x, y=y, k=1)
str(model1.train)
# plot the fit
plot.train + geom_line(aes(x=x, y=model1.train$pred), col="blue")
# Training MSE
mean((y - model1.train$pred)^2)
## 2b. k=1, test MSE
model1.test <- knn.reg(train=train.x, test=test.x, y=y, k=1)
str(model1.test)
# plot the fit
plot.test + geom_line(aes(x=x.test, y=model1.test$pred), col="blue")
x.test <- seq(0, 5, 0.01)
model15.train <- knn.reg(train=train.x, test=train.x, y=y, k=15)
str(model15.train)
# plot the fit
plot.train + geom_line(aes(x=x, y=model15.train$pred), col="blue")
plot.train + geom_line(aes(x=x, y=model15.train$pred), col="blue")
plot.train + geom_point(aes(x=x, y=model15.train$pred), col="blue")
plot.test + geom_point(aes(x=x.test, y=model15.test$pred), col="blue")
library("ggplot2")
#############################
### Generating data
# Simulate a 3rd-order polynomial data
# y = beta0 + beta1 * x + beta2 * x^2 + beta3 * x^3 + epsilon
# epsilon ~ N(0, sigma^2)
#############################
## population parameters
beta0 <- 1
beta1 <- -2
sigma <- 2
set.seed(7890)
## training data
f_x <- beta0 + beta1 * x + beta2 * x^2 + beta3 * x^3
epsilon <- rnorm(n=100, mean=0, sd=sigma)
y <- f_x + epsilon
plot.train
## test data
f_x.test <- beta0 + beta1 * x.test + beta2 * x.test^2 + beta3 * x.test^3
y.test <- f_x.test + epsilon.test
# visualize the test data (x, y) and the true model f_x
plot.test
#############################
### KNN regression
library("FNN")
?knn.reg
test.x <- matrix(x.test, ncol=1)
## 1. k=15, training MSE
train.x <- matrix(x, ncol=1)
x.test <- seq(0, 5, 0.1)
beta3 <- -1
epsilon.test <- rnorm(n=length(x.test), mean=0, sd=sigma)
# visualize the training data (x, y) and the true model f_x
plot.test <- ggplot() + geom_point(aes(x=x.test, y=y.test), size=2) + geom_line(aes(x=x.test, y=f_x.test)) + theme_bw()
# prepare the X data in the matrix format, as required by knn.reg()
model15.train <- knn.reg(train=train.x, test=train.x, y=y, k=15)
x <- seq(0, 4.95, 0.05)
beta2 <- 6
#############################
# knn regression is in package "FNN"
plot.train <- ggplot() + geom_point(aes(x=x, y=y), size=2) + geom_line(aes(x=x, y=f_x)) + theme_bw()
str(model15.train)
# plot the fit
plot.train + geom_line(aes(x=x, y=model15.train$pred), col="blue")
plot.train + geom_point(aes(x=x, y=model15.train$pred), col="blue")
plot.test + geom_point(aes(x=x.test, y=model15.test$pred), col="blue")
line
plot.test + geom_line(aes(x=x.test, y=model15.test$pred), col="blue")
plot.train + geom_point(aes(x=x, y=model15.train$pred), col="blue")
# Training MSE
mean((y - model15.train$pred)^2)
## 1b. k=15, test MSE
model15.test <- knn.reg(train=train.x, test=test.x, y=y, k=15)
str(model15.test)
# plot the fit
plot.test + geom_line(aes(x=x.test, y=model15.test$pred), col="blue")
library("ggplot2")
#############################
### Generating data
# Simulate a 3rd-order polynomial data
# y = beta0 + beta1 * x + beta2 * x^2 + beta3 * x^3 + epsilon
# epsilon ~ N(0, sigma^2)
#############################
beta0 <- 1
beta3 <- -1
set.seed(7890)
## training data
f_x <- beta0 + beta1 * x + beta2 * x^2 + beta3 * x^3
epsilon <- rnorm(n=100, mean=0, sd=sigma)
y <- f_x + epsilon
plot.train <- ggplot() + geom_point(aes(x=x, y=y), size=2) + geom_line(aes(x=x, y=f_x)) + theme_bw()
# visualize the training data (x, y) and the true model f_x
sigma <- 2
plot.train
beta1 <- -2
x <- seq(0, 4.95, 0.05)
beta2 <- 6
## population parameters
## test data
x.test <- seq(0, 5, 0.1)
f_x.test <- beta0 + beta1 * x.test + beta2 * x.test^2 + beta3 * x.test^3
epsilon.test <- rnorm(n=length(x.test), mean=0, sd=sigma)
y.test <- f_x.test + epsilon.test
# visualize the test data (x, y) and the true model f_x
plot.test <- ggplot() + geom_point(aes(x=x.test, y=y.test), size=2) + geom_line(aes(x=x.test, y=f_x.test)) + theme_bw()
plot.test
#############################
### KNN regression
#############################
# knn regression is in package "FNN"
library("FNN")
?knn.reg
# prepare the X data in the matrix format, as required by knn.reg()
train.x <- matrix(x, ncol=1)
test.x <- matrix(x.test, ncol=1)
## 1. k=15, training MSE
model15.train <- knn.reg(train=train.x, test=train.x, y=y, k=15)
str(model15.train)
# plot the fit
plot.train + geom_line(aes(x=x, y=model15.train$pred), col="blue")
# Training MSE
mean((y - model15.train$pred)^2)
## 1b. k=15, test MSE
model15.test <- knn.reg(train=train.x, test=test.x, y=y, k=15)
str(model15.test)
# plot the fit
plot.test + geom_line(aes(x=x.test, y=model15.test$pred), col="blue")
plot.test + geom_point(aes(x=x.test, y=model15.test$pred), col="blue")
library("swirl"
)
swirl()
y <- 100
cars$type
sqrt(y)
z <- sqrt(y)
?sqrt
cars
20
25
23
22
21
24
10
range(cars$price)
bye()
swirl()
install_from_swirl("Regression Models")
swirl()
bye()
install.packages("calibrate") install.packages("AER")
install.packages("calibrate") install.packages("AER")
install.packages("calibrate")
install.packages("AER")
